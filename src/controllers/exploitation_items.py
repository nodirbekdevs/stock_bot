from typing import List
from src.models import ExploitationItem
from src.models.exploitation_items import MongoExploitationItem


class ExploitationItemsController:
    def __init__(self, model: ExploitationItem):
        self.model = model

    async def get_all(self, query: dict) -> List[ExploitationItem]:
        try:
            length = await self.model.count_documents(query)
            return await self.model.find(query).to_list(length=length)
        except Exception as error:
            print(error)

    async def get_one(self, query: dict) -> ExploitationItem:
        try:
            return await self.model.find_one(query)
        except Exception as error:
            print(error)

    async def get_pagination(self, query: dict, offset: int, limit: int) -> List[ExploitationItem]:
        try:
            return await self.model.find(query).skip(offset).limit(limit).to_list(length=limit)
        except Exception as error:
            print(error)

    async def make(self, data: dict) -> ExploitationItem:
        try:
            model = MongoExploitationItem()

            for key, value in data.items():
                setattr(model, key, value)

            return await self.model.insert_one(model.to_mongo())
        except Exception as error:
            print(error)

    async def update(self, query: dict, data: dict):
        try:
            return await self.model.update_one(query, {"$set": data})
        except Exception as error:
            print(error)

    async def update_many(self, query: dict, data: dict):
        try:
            return await self.model.update_many(query, {'$set': data})
        except Exception as error:
            print(error)

    async def increment(self, query: dict, data: dict):
        try:
            return await self.model.update_one(query, {'$inc': data})
        except Exception as error:
            print(error)

    async def delete(self, query: dict):
        try:
            return await self.model.delete_one(query)
        except Exception as error:
            print(error)

    async def delete_many(self, query: dict):
        try:
            return await self.model.delete_many(query)
        except Exception as error:
            print(error)

    async def count(self, query: dict):
        try:
            return await self.model.count_documents(query)
        except Exception as error:
            print(error)